//
// <auto-generated>
//     This code was generated by a tool.
//     Def2Pas, version 0.53
//
//     Copyright (C) 1995-2023, Yegor Mialyk. All Rights Reserved.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//

const
  FARMANAGERVERSION_MAJOR = 3;
  FARMANAGERVERSION_MINOR = 0;
  FARMANAGERVERSION_REVISION = 0;
  FARMANAGERVERSION_BUILD = 6213;

type
  UUID = TGUID;

const
  CP_UNICODE = UIntPtr(1200);
  CP_REVERSEBOM = UIntPtr(1201);
  CP_DEFAULT = UIntPtr(-1);
  CP_REDETECT = UIntPtr(-2);

type
  UNDERLINE_STYLE = Integer;

const
  UNDERLINE_NONE = 0;
  UNDERLINE_SINGLE = 1;
  UNDERLINE_DOUBLE = 2;
  UNDERLINE_CURLY = 3;
  UNDERLINE_DOT = 4;
  UNDERLINE_DASH = 5;

type
  FARCOLORFLAGS = UInt64;

const
  FCF_FG_INDEX = $0000000000000001;
  FCF_BG_INDEX = $0000000000000002;
  FCF_FG_UNDERLINE_INDEX = $0000000000000008;
  FCF_INDEXMASK = $000000000000000B;
  FCF_FG_4BIT = $0000000000000001;
  FCF_BG_4BIT = $0000000000000002;
  FCF_4BITMASK = $000000000000000B;
  FCF_INHERIT_STYLE = $0000000000000004;
  FCF_RAWATTR_MASK = $000000000000FF00;
  FCF_FG_BOLD = $1000000000000000;
  FCF_FG_ITALIC = $2000000000000000;
  FCF_FG_U_DATA0 = $4000000000000000;
  FCF_FG_U_DATA1 = $8000000000000000;
  FCF_FG_OVERLINE = $0100000000000000;
  FCF_FG_STRIKEOUT = $0200000000000000;
  FCF_FG_FAINT = $0400000000000000;
  FCF_FG_BLINK = $0800000000000000;
  FCF_FG_INVERSE = $0010000000000000;
  FCF_FG_INVISIBLE = $0020000000000000;
  FCF_FG_U_DATA2 = $0040000000000000;
  FCF_FG_UNDERLINE_MASK = $C040000000000000;
  FCF_STYLEMASK = $FFF0000000000000;
  FCF_NONE = 0;

type
  Prgba = ^rgba;
  rgba = record
    r: Byte;
    g: Byte;
    b: Byte;
    a: Byte;
  end;

type
  Pcolor_index = ^color_index;
  color_index = record
    i: Byte;
    reserved0: Byte;
    reserved1: Byte;
    a: Byte;
  end;

const
  INDEXMASK = $000000ff;
  COLORMASK = $00ffffff;
  ALPHAMASK = $ff000000;

type
  PFarColor = ^FarColor;

{$INCLUDE Far.Plugin.FarColor.pas}

type
  COLORDIALOGFLAGS = UInt64;

const
  CDF_NONE = 0;

type
  FARAPICOLORDIALOG = function (
    const PluginId: TGUID;
    Flags: COLORDIALOGFLAGS;
    Color: PFarColor
  ): BOOL; stdcall;

type
  FARMESSAGEFLAGS = UInt64;

const
  FMSG_WARNING = $0000000000000001;
  FMSG_ERRORTYPE = $0000000000000002;
  FMSG_KEEPBACKGROUND = $0000000000000004;
  FMSG_LEFTALIGN = $0000000000000008;
  FMSG_ALLINONE = $0000000000000010;
  FMSG_MB_OK = $0000000000010000;
  FMSG_MB_OKCANCEL = $0000000000020000;
  FMSG_MB_ABORTRETRYIGNORE = $0000000000030000;
  FMSG_MB_YESNO = $0000000000040000;
  FMSG_MB_YESNOCANCEL = $0000000000050000;
  FMSG_MB_RETRYCANCEL = $0000000000060000;
  FMSG_NONE = 0;

type
  FARAPIMESSAGE = function (
    const PluginId: TGUID;
    const Id: TGUID;
    Flags: FARMESSAGEFLAGS;
    HelpTopic: PChar;
    Items: PPChar;
    ItemsNumber: UIntPtr;
    ButtonsNumber: IntPtr
  ): IntPtr; stdcall;

type
  FARDIALOGITEMTYPES = Integer;

const
  DI_TEXT = 0;
  DI_VTEXT = 1;
  DI_SINGLEBOX = 2;
  DI_DOUBLEBOX = 3;
  DI_EDIT = 4;
  DI_PSWEDIT = 5;
  DI_FIXEDIT = 6;
  DI_BUTTON = 7;
  DI_CHECKBOX = 8;
  DI_RADIOBUTTON = 9;
  DI_COMBOBOX = 10;
  DI_LISTBOX = 11;

  DI_USERCONTROL = 255;

type
  FARDIALOGITEMFLAGS = UInt64;

const
  DIF_BOXCOLOR = $0000000000000200;
  DIF_GROUP = $0000000000000400;
  DIF_LEFTTEXT = $0000000000000800;
  DIF_MOVESELECT = $0000000000001000;
  DIF_SHOWAMPERSAND = $0000000000002000;
  DIF_CENTERGROUP = $0000000000004000;
  DIF_NOBRACKETS = $0000000000008000;
  DIF_MANUALADDHISTORY = $0000000000008000;
  DIF_SEPARATOR = $0000000000010000;
  DIF_SEPARATOR2 = $0000000000020000;
  DIF_EDITOR = $0000000000020000;
  DIF_LISTNOAMPERSAND = $0000000000020000;
  DIF_LISTNOBOX = $0000000000040000;
  DIF_HISTORY = $0000000000040000;
  DIF_BTNNOCLOSE = $0000000000040000;
  DIF_CENTERTEXT = $0000000000040000;
  DIF_SEPARATORUSER = $0000000000080000;
  DIF_SETSHIELD = $0000000000080000;
  DIF_EDITEXPAND = $0000000000080000;
  DIF_DROPDOWNLIST = $0000000000100000;
  DIF_USELASTHISTORY = $0000000000200000;
  DIF_MASKEDIT = $0000000000400000;
  DIF_LISTTRACKMOUSE = $0000000000400000;
  DIF_LISTTRACKMOUSEINFOCUS = $0000000000800000;
  DIF_SELECTONENTRY = $0000000000800000;
  DIF_3STATE = $0000000000800000;
  DIF_EDITPATH = $0000000001000000;
  DIF_LISTWRAPMODE = $0000000001000000;
  DIF_NOAUTOCOMPLETE = $0000000002000000;
  DIF_LISTAUTOHIGHLIGHT = $0000000002000000;
  DIF_LISTNOCLOSE = $0000000004000000;
  DIF_EDITPATHEXEC = $0000000004000000;
  DIF_HIDDEN = $0000000010000000;
  DIF_READONLY = $0000000020000000;
  DIF_NOFOCUS = $0000000040000000;
  DIF_DISABLE = $0000000080000000;
  DIF_DEFAULTBUTTON = $0000000100000000;
  DIF_FOCUS = $0000000200000000;
  DIF_RIGHTTEXT = $0000000400000000;
  DIF_WORDWRAP = $0000000800000000;
  DIF_HOMEITEM = $0000002000000000;
  DIF_NONE = 0;

type
  FARMESSAGE = Integer;

const
  DM_FIRST = 0;
  DM_CLOSE = 1;
  DM_ENABLE = 2;
  DM_ENABLEREDRAW = 3;
  DM_GETDLGDATA = 4;
  DM_GETDLGITEM = 5;
  DM_GETDLGRECT = 6;
  DM_GETTEXT = 7;
  DM_KEY = 9;
  DM_MOVEDIALOG = 10;
  DM_SETDLGDATA = 11;
  DM_SETDLGITEM = 12;
  DM_SETFOCUS = 13;
  DM_REDRAW = 14;
  DM_SETTEXT = 15;
  DM_SETMAXTEXTLENGTH = 16;
  DM_SHOWDIALOG = 17;
  DM_GETFOCUS = 18;
  DM_GETCURSORPOS = 19;
  DM_SETCURSORPOS = 20;
  DM_SETTEXTPTR = 22;
  DM_SHOWITEM = 23;
  DM_ADDHISTORY = 24;

  DM_GETCHECK = 25;
  DM_SETCHECK = 26;
  DM_SET3STATE = 27;

  DM_LISTSORT = 28;
  DM_LISTGETITEM = 29;
  DM_LISTGETCURPOS = 30;
  DM_LISTSETCURPOS = 31;
  DM_LISTDELETE = 32;
  DM_LISTADD = 33;
  DM_LISTADDSTR = 34;
  DM_LISTUPDATE = 35;
  DM_LISTINSERT = 36;
  DM_LISTFINDSTRING = 37;
  DM_LISTINFO = 38;
  DM_LISTGETDATA = 39;
  DM_LISTSETDATA = 40;
  DM_LISTSETTITLES = 41;
  DM_LISTGETTITLES = 42;

  DM_RESIZEDIALOG = 43;
  DM_SETITEMPOSITION = 44;

  DM_GETDROPDOWNOPENED = 45;
  DM_SETDROPDOWNOPENED = 46;

  DM_SETHISTORY = 47;

  DM_GETITEMPOSITION = 48;
  DM_SETINPUTNOTIFY = 49;
  DM_SETMOUSEEVENTNOTIFY = DM_SETINPUTNOTIFY;

  DM_EDITUNCHANGEDFLAG = 50;

  DM_GETITEMDATA = 51;
  DM_SETITEMDATA = 52;

  DM_LISTSET = 53;

  DM_GETCURSORSIZE = 54;
  DM_SETCURSORSIZE = 55;

  DM_LISTGETDATASIZE = 56;

  DM_GETSELECTION = 57;
  DM_SETSELECTION = 58;

  DM_GETEDITPOSITION = 59;
  DM_SETEDITPOSITION = 60;

  DM_SETCOMBOBOXEVENT = 61;
  DM_GETCOMBOBOXEVENT = 62;

  DM_GETCONSTTEXTPTR = 63;
  DM_GETDLGITEMSHORT = 64;
  DM_SETDLGITEMSHORT = 65;

  DM_GETDIALOGINFO = 66;

  DM_GETDIALOGTITLE = 67;

  DN_FIRST = 4096;
  DN_BTNCLICK = 4097;
  DN_CTLCOLORDIALOG = 4098;
  DN_CTLCOLORDLGITEM = 4099;
  DN_CTLCOLORDLGLIST = 4100;
  DN_DRAWDIALOG = 4101;
  DN_DRAWDLGITEM = 4102;
  DN_EDITCHANGE = 4103;
  DN_GOTFOCUS = 4105;
  DN_HELP = 4106;
  DN_HOTKEY = 4107;
  DN_INITDIALOG = 4108;
  DN_KILLFOCUS = 4109;
  DN_LISTCHANGE = 4110;
  DN_DRAGGED = 4111;
  DN_RESIZECONSOLE = 4112;
  DN_DRAWDIALOGDONE = 4113;
  DN_LISTHOTKEY = 4114;
  DN_INPUT = 4115;
  DN_CONTROLINPUT = 4116;
  DN_CLOSE = 4117;
  DN_GETVALUE = 4118;
  DN_DROPDOWNOPENED = 4119;
  DN_DRAWDLGITEMDONE = 4120;

  DM_USER = $4000;


type
  FARCHECKEDSTATE = Integer;

const
  BSTATE_UNCHECKED = 0;
  BSTATE_CHECKED = 1;
  BSTATE_3STATE = 2;
  BSTATE_TOGGLE = 3;

type
  FARCOMBOBOXEVENTTYPE = Integer;

const
  CBET_KEY = $00000001;
  CBET_MOUSE = $00000002;

type
  LISTITEMFLAGS = UInt64;

const
  LIF_SELECTED = $0000000000010000;
  LIF_CHECKED = $0000000000020000;
  LIF_SEPARATOR = $0000000000040000;
  LIF_DISABLE = $0000000000080000;
  LIF_GRAYED = $0000000000100000;
  LIF_HIDDEN = $0000000000200000;
  LIF_DELETEUSERDATA = $0000000080000000;
  LIF_NONE = 0;

type
  PFarListItem = ^FarListItem;
  FarListItem = record
    Flags: LISTITEMFLAGS;
    Text: PChar;
    UserData: IntPtr;
    Reserved: IntPtr;
  end;

type
  PFarListUpdate = ^FarListUpdate;
  FarListUpdate = record
    StructSize: UIntPtr;
    Index: IntPtr;
    Item: FarListItem;
  end;

type
  PFarListInsert = ^FarListInsert;
  FarListInsert = record
    StructSize: UIntPtr;
    Index: IntPtr;
    Item: FarListItem;
  end;

type
  PFarListGetItem = ^FarListGetItem;
  FarListGetItem = record
    StructSize: UIntPtr;
    ItemIndex: IntPtr;
    Item: FarListItem;
  end;

type
  PFarListPos = ^FarListPos;
  FarListPos = record
    StructSize: UIntPtr;
    SelectPos: IntPtr;
    TopPos: IntPtr;
  end;

type
  FARLISTFINDFLAGS = UInt64;

const
  LIFIND_EXACTMATCH = $0000000000000001;
  LIFIND_NONE = 0;

type
  PFarListFind = ^FarListFind;
  FarListFind = record
    StructSize: UIntPtr;
    StartIndex: IntPtr;
    Pattern: PChar;
    Flags: FARLISTFINDFLAGS;
  end;

type
  PFarListDelete = ^FarListDelete;
  FarListDelete = record
    StructSize: UIntPtr;
    StartIndex: IntPtr;
    Count: IntPtr;
  end;

type
  FARLISTINFOFLAGS = UInt64;

const
  LINFO_SHOWNOBOX = $0000000000000400;
  LINFO_AUTOHIGHLIGHT = $0000000000000800;
  LINFO_REVERSEHIGHLIGHT = $0000000000001000;
  LINFO_WRAPMODE = $0000000000008000;
  LINFO_SHOWAMPERSAND = $0000000000010000;
  LINFO_NONE = 0;

type
  PFarListInfo = ^FarListInfo;
  FarListInfo = record
    StructSize: UIntPtr;
    Flags: FARLISTINFOFLAGS;
    ItemsNumber: UIntPtr;
    SelectPos: IntPtr;
    TopPos: IntPtr;
    MaxHeight: IntPtr;
    MaxLength: IntPtr;
  end;

type
  PFarListItemData = ^FarListItemData;
  FarListItemData = record
    StructSize: UIntPtr;
    Index: IntPtr;
    DataSize: UIntPtr;
    Data: Pointer;
  end;

type
  PFarList = ^FarList;
  FarList = record
    StructSize: UIntPtr;
    ItemsNumber: UIntPtr;
    Items: PFarListItem;
  end;

type
  PFarListTitles = ^FarListTitles;
  FarListTitles = record
    StructSize: UIntPtr;
    TitleSize: UIntPtr;
    Title: PChar;
    BottomSize: UIntPtr;
    Bottom: PChar;
  end;

type
  PFarDialogItemColors = ^FarDialogItemColors;
  FarDialogItemColors = record
    StructSize: UIntPtr;
    Flags: UInt64;
    ColorsCount: UIntPtr;
    Colors: PFarColor;
  end;

type
  PFAR_CHAR_INFO = ^FAR_CHAR_INFO;
  FAR_CHAR_INFO = record
    Char: Char;
    Attributes: FarColor;
  end;

type
  PFarDialogItem = ^FarDialogItem;
  FarDialogItem = record
    &Type: FARDIALOGITEMTYPES;
    X1: IntPtr;
    Y1: IntPtr;
    X2: IntPtr;
    Y2: IntPtr;
    Param: record case Integer of
      0: (Selected: IntPtr);
      1: (ListItems: PFarList);
      2: (VBuf: PFAR_CHAR_INFO);
      3: (Reserved0: IntPtr);
    end;
    History: PChar;
    Mask: PChar;
    Flags: FARDIALOGITEMFLAGS;
    Data: PChar;
    MaxLength: UIntPtr;
    UserData: IntPtr;
    Reserved: array [0..1] of IntPtr;
  end;

type
  PFarDialogItemData = ^FarDialogItemData;
  FarDialogItemData = record
    StructSize: UIntPtr;
    PtrLength: UIntPtr;
    PtrData: PChar;
  end;

type
  PFarDialogEvent = ^FarDialogEvent;
  FarDialogEvent = record
    StructSize: UIntPtr;
    hDlg: THandle;
    Msg: IntPtr;
    Param1: IntPtr;
    Param2: Pointer;
    Result: IntPtr;
  end;

type
  POpenDlgPluginData = ^OpenDlgPluginData;
  OpenDlgPluginData = record
    StructSize: UIntPtr;
    hDlg: THandle;
  end;

type
  PDialogInfo = ^DialogInfo;
  DialogInfo = record
    StructSize: UIntPtr;
    Id: TGUID;
    Owner: TGUID;
  end;

type
  PFarGetDialogItem = ^FarGetDialogItem;
  FarGetDialogItem = record
    StructSize: UIntPtr;
    Size: UIntPtr;
    Item: PFarDialogItem;
  end;

type
  FARDIALOGFLAGS = UInt64;

const
  FDLG_WARNING = $0000000000000001;
  FDLG_SMALLDIALOG = $0000000000000002;
  FDLG_NODRAWSHADOW = $0000000000000004;
  FDLG_NODRAWPANEL = $0000000000000008;
  FDLG_KEEPCONSOLETITLE = $0000000000000010;
  FDLG_NONMODAL = $0000000000000020;
  FDLG_NONE = 0;

type
  FARWINDOWPROC = function (
    hDlg: THandle;
    Msg: IntPtr;
    Param1: IntPtr;
    Param2: Pointer
  ): IntPtr; stdcall;

type
  FARAPISENDDLGMESSAGE = function (
    hDlg: THandle;
    Msg: IntPtr;
    Param1: IntPtr;
    Param2: Pointer
  ): IntPtr; stdcall;

type
  FARAPIDEFDLGPROC = function (
    hDlg: THandle;
    Msg: IntPtr;
    Param1: IntPtr;
    Param2: Pointer
  ): IntPtr; stdcall;

type
  FARAPIDIALOGINIT = function (
    const PluginId: TGUID;
    const Id: TGUID;
    X1: IntPtr;
    Y1: IntPtr;
    X2: IntPtr;
    Y2: IntPtr;
    HelpTopic: PChar;
    Item: PFarDialogItem;
    ItemsNumber: UIntPtr;
    Reserved: IntPtr;
    Flags: FARDIALOGFLAGS;
    DlgProc: FARWINDOWPROC;
    Param: Pointer
  ): THandle; stdcall;

type
  FARAPIDIALOGRUN = function (
    hDlg: THandle
  ): IntPtr; stdcall;

type
  FARAPIDIALOGFREE = procedure (
    hDlg: THandle
  ); stdcall;

type
  PFarKey = ^FarKey;
  FarKey = record
    VirtualKeyCode: WORD;
    ControlKeyState: DWORD;
  end;

type
  MENUITEMFLAGS = UInt64;

const
  MIF_SELECTED = $0000000000010000;
  MIF_CHECKED = $0000000000020000;
  MIF_SEPARATOR = $0000000000040000;
  MIF_DISABLE = $0000000000080000;
  MIF_GRAYED = $0000000000100000;
  MIF_HIDDEN = $0000000000200000;
  MIF_NONE = 0;

type
  PFarMenuItem = ^FarMenuItem;
  FarMenuItem = record
    Flags: MENUITEMFLAGS;
    Text: PChar;
    AccelKey: FarKey;
    UserData: IntPtr;
    Reserved: array [0..1] of IntPtr;
  end;

type
  FARMENUFLAGS = UInt64;

const
  FMENU_SHOWAMPERSAND = $0000000000000001;
  FMENU_WRAPMODE = $0000000000000002;
  FMENU_AUTOHIGHLIGHT = $0000000000000004;
  FMENU_REVERSEAUTOHIGHLIGHT = $0000000000000008;
  FMENU_CHANGECONSOLETITLE = $0000000000000010;
  FMENU_SHOWNOBOX = $0000000000000020;
  FMENU_SHOWSHORTBOX = $0000000000000040;
  FMENU_SHOWSINGLEBOX = $0000000000000080;
  FMENU_NODRAWSHADOW = $0000000000000100;
  FMENU_NONE = 0;

type
  FARAPIMENU = function (
    const PluginId: TGUID;
    const Id: TGUID;
    X: IntPtr;
    Y: IntPtr;
    MaxHeight: IntPtr;
    Flags: FARMENUFLAGS;
    Title: PChar;
    Bottom: PChar;
    HelpTopic: PChar;
    BreakKeys: PFarKey;
    BreakCode: PIntPtr;
    Item: PFarMenuItem;
    ItemsNumber: UIntPtr
  ): IntPtr; stdcall;

type
  PLUGINPANELITEMFLAGS = UInt64;

const
  PPIF_SELECTED = $0000000040000000;
  PPIF_PROCESSDESCR = $0000000080000000;
  PPIF_NONE = 0;

type
  PFarPanelItemFreeInfo = ^FarPanelItemFreeInfo;
  FarPanelItemFreeInfo = record
    StructSize: UIntPtr;
    hPlugin: THandle;
  end;

type
  FARPANELITEMFREECALLBACK = procedure (
    UserData: Pointer;
    Info: PFarPanelItemFreeInfo
  ); stdcall;

type
  PUserDataItem = ^UserDataItem;
  UserDataItem = record
    Data: Pointer;
    FreeData: FARPANELITEMFREECALLBACK;
  end;

type
  PPluginPanelItem = ^PluginPanelItem;
  PluginPanelItem = record
    CreationTime: FILETIME;
    LastAccessTime: FILETIME;
    LastWriteTime: FILETIME;
    ChangeTime: FILETIME;
    FileSize: UInt64;
    AllocationSize: UInt64;
    FileName: PChar;
    AlternateFileName: PChar;
    Description: PChar;
    Owner: PChar;
    CustomColumnData: PPChar;
    CustomColumnNumber: UIntPtr;
    Flags: PLUGINPANELITEMFLAGS;
    UserData: UserDataItem;
    FileAttributes: UIntPtr;
    NumberOfLinks: UIntPtr;
    CRC32: UIntPtr;
    Reserved: array [0..1] of IntPtr;
  end;

type
  PFarGetPluginPanelItem = ^FarGetPluginPanelItem;
  FarGetPluginPanelItem = record
    StructSize: UIntPtr;
    Size: UIntPtr;
    Item: PPluginPanelItem;
  end;

type
  PSortingPanelItem = ^SortingPanelItem;
  SortingPanelItem = record
    CreationTime: FILETIME;
    LastAccessTime: FILETIME;
    LastWriteTime: FILETIME;
    ChangeTime: FILETIME;
    FileSize: UInt64;
    AllocationSize: UInt64;
    FileName: PChar;
    AlternateFileName: PChar;
    Description: PChar;
    Owner: PChar;
    CustomColumnData: PPChar;
    CustomColumnNumber: UIntPtr;
    Flags: PLUGINPANELITEMFLAGS;
    UserData: UserDataItem;
    FileAttributes: UIntPtr;
    NumberOfLinks: UIntPtr;
    CRC32: UIntPtr;
    Position: IntPtr;
    SortGroup: IntPtr;
    NumberOfStreams: UIntPtr;
    StreamsSize: UInt64;
  end;

type
  PANELINFOFLAGS = UInt64;

const
  PFLAGS_SHOWHIDDEN = $0000000000000001;
  PFLAGS_HIGHLIGHT = $0000000000000002;
  PFLAGS_REVERSESORTORDER = $0000000000000004;
  PFLAGS_USESORTGROUPS = $0000000000000008;
  PFLAGS_SELECTEDFIRST = $0000000000000010;
  PFLAGS_REALNAMES = $0000000000000020;
  PFLAGS_PANELLEFT = $0000000000000080;
  PFLAGS_DIRECTORIESFIRST = $0000000000000100;
  PFLAGS_USECRC32 = $0000000000000200;
  PFLAGS_PLUGIN = $0000000000000800;
  PFLAGS_VISIBLE = $0000000000001000;
  PFLAGS_FOCUS = $0000000000002000;
  PFLAGS_ALTERNATIVENAMES = $0000000000004000;
  PFLAGS_SHORTCUT = $0000000000008000;
  PFLAGS_NONE = 0;

type
  PANELINFOTYPE = Integer;

const
  PTYPE_FILEPANEL = 0;
  PTYPE_TREEPANEL = 1;
  PTYPE_QVIEWPANEL = 2;
  PTYPE_INFOPANEL = 3;

type
  OPENPANELINFO_SORTMODES = Integer;

const
  SM_DEFAULT = 0;
  SM_UNSORTED = 1;
  SM_NAME = 2;
  SM_FULLNAME = SM_NAME;
  SM_EXT = 3;
  SM_MTIME = 4;
  SM_CTIME = 5;
  SM_ATIME = 6;
  SM_SIZE = 7;
  SM_DESCR = 8;
  SM_OWNER = 9;
  SM_COMPRESSEDSIZE = 10;
  SM_NUMLINKS = 11;
  SM_NUMSTREAMS = 12;
  SM_STREAMSSIZE = 13;
  SM_NAMEONLY = 14;
  SM_CHTIME = 15;

  SM_COUNT = 16;

  SM_USER = 100000;

type
  PPanelInfo = ^PanelInfo;
  PanelInfo = record
    StructSize: UIntPtr;
    PluginHandle: THandle;
    OwnerGuid: TGUID;
    Flags: PANELINFOFLAGS;
    ItemsNumber: UIntPtr;
    SelectedItemsNumber: UIntPtr;
    PanelRect: TRect;
    CurrentItem: UIntPtr;
    TopPanelItem: UIntPtr;
    ViewMode: IntPtr;
    PanelType: PANELINFOTYPE;
    SortMode: OPENPANELINFO_SORTMODES;
  end;

type
  PPanelRedrawInfo = ^PanelRedrawInfo;
  PanelRedrawInfo = record
    StructSize: UIntPtr;
    CurrentItem: UIntPtr;
    TopPanelItem: UIntPtr;
  end;

type
  PCmdLineSelect = ^CmdLineSelect;
  CmdLineSelect = record
    StructSize: UIntPtr;
    SelStart: IntPtr;
    SelEnd: IntPtr;
  end;

type
  PFarPanelDirectory = ^FarPanelDirectory;
  FarPanelDirectory = record
    StructSize: UIntPtr;
    Name: PChar;
    Param: PChar;
    PluginId: TGUID;
    &File: PChar;
  end;

const
  PANEL_NONE = THandle((-1));
  PANEL_ACTIVE = THandle((-1));
  PANEL_PASSIVE = THandle((-2));
  PANEL_STOP = THandle((-1));

type
  FILE_CONTROL_COMMANDS = Integer;

const
  FCTL_CLOSEPANEL = 0;
  FCTL_GETPANELINFO = 1;
  FCTL_UPDATEPANEL = 2;
  FCTL_REDRAWPANEL = 3;
  FCTL_GETCMDLINE = 4;
  FCTL_SETCMDLINE = 5;
  FCTL_SETSELECTION = 6;
  FCTL_SETVIEWMODE = 7;
  FCTL_INSERTCMDLINE = 8;
  FCTL_SETUSERSCREEN = 9;
  FCTL_SETPANELDIRECTORY = 10;
  FCTL_SETCMDLINEPOS = 11;
  FCTL_GETCMDLINEPOS = 12;
  FCTL_SETSORTMODE = 13;
  FCTL_SETSORTORDER = 14;
  FCTL_SETCMDLINESELECTION = 15;
  FCTL_GETCMDLINESELECTION = 16;
  FCTL_CHECKPANELSEXIST = 17;
  FCTL_GETUSERSCREEN = 19;
  FCTL_ISACTIVEPANEL = 20;
  FCTL_GETPANELITEM = 21;
  FCTL_GETSELECTEDPANELITEM = 22;
  FCTL_GETCURRENTPANELITEM = 23;
  FCTL_GETPANELDIRECTORY = 24;
  FCTL_GETCOLUMNTYPES = 25;
  FCTL_GETCOLUMNWIDTHS = 26;
  FCTL_BEGINSELECTION = 27;
  FCTL_ENDSELECTION = 28;
  FCTL_CLEARSELECTION = 29;
  FCTL_SETDIRECTORIESFIRST = 30;
  FCTL_GETPANELFORMAT = 31;
  FCTL_GETPANELHOSTFILE = 32;
  FCTL_GETPANELPREFIX = 34;
  FCTL_SETACTIVEPANEL = 35;

type
  FARAPITEXT = procedure (
    X: IntPtr;
    Y: IntPtr;
    Color: PFarColor;
    Str: PChar
  ); stdcall;

type
  FARAPISAVESCREEN = function (
    X1: IntPtr;
    Y1: IntPtr;
    X2: IntPtr;
    Y2: IntPtr
  ): THandle; stdcall;

type
  FARAPIRESTORESCREEN = procedure (
    hScreen: THandle
  ); stdcall;

type
  FARAPIFREESCREEN = procedure (
    hScreen: THandle
  ); stdcall;

type
  FARAPIGETDIRLIST = function (
    Dir: PChar;
    var pPanelItem: PPluginPanelItem;
    var pItemsNumber: UIntPtr
  ): IntPtr; stdcall;

type
  FARAPIGETPLUGINDIRLIST = function (
    const PluginId: TGUID;
    hPanel: THandle;
    Dir: PChar;
    var pPanelItem: PPluginPanelItem;
    var pItemsNumber: UIntPtr
  ): IntPtr; stdcall;

type
  FARAPIFREEDIRLIST = procedure (
    PanelItem: PPluginPanelItem;
    nItemsNumber: UIntPtr
  ); stdcall;

type
  FARAPIFREEPLUGINDIRLIST = procedure (
    hPanel: THandle;
    PanelItem: PPluginPanelItem;
    nItemsNumber: UIntPtr
  ); stdcall;

type
  VIEWER_FLAGS = UInt64;

const
  VF_NONMODAL = $0000000000000001;
  VF_DELETEONCLOSE = $0000000000000002;
  VF_ENABLE_F6 = $0000000000000004;
  VF_DISABLEHISTORY = $0000000000000008;
  VF_IMMEDIATERETURN = $0000000000000100;
  VF_DELETEONLYFILEONCLOSE = $0000000000000200;
  VF_NONE = 0;

type
  FARAPIVIEWER = function (
    FileName: PChar;
    Title: PChar;
    X1: IntPtr;
    Y1: IntPtr;
    X2: IntPtr;
    Y2: IntPtr;
    Flags: VIEWER_FLAGS;
    CodePage: UIntPtr
  ): IntPtr; stdcall;

type
  EDITOR_FLAGS = UInt64;

const
  EF_NONMODAL = $0000000000000001;
  EF_CREATENEW = $0000000000000002;
  EF_ENABLE_F6 = $0000000000000004;
  EF_DISABLEHISTORY = $0000000000000008;
  EF_DELETEONCLOSE = $0000000000000010;
  EF_IMMEDIATERETURN = $0000000000000100;
  EF_DELETEONLYFILEONCLOSE = $0000000000000200;
  EF_LOCKED = $0000000000000400;
  EF_DISABLESAVEPOS = $0000000000000800;
  EF_OPENMODE_MASK = $00000000F0000000;
  EF_OPENMODE_QUERY = $0000000000000000;
  EF_OPENMODE_NEWIFOPEN = $0000000010000000;
  EF_OPENMODE_USEEXISTING = $0000000020000000;
  EF_OPENMODE_BREAKIFOPEN = $0000000030000000;
  EF_OPENMODE_RELOADIFOPEN = $0000000040000000;
  EN_NONE = 0;

type
  EDITOR_EXITCODE = Integer;

const
  EEC_OPEN_ERROR = 0;
  EEC_MODIFIED = 1;
  EEC_NOT_MODIFIED = 2;
  EEC_LOADING_INTERRUPTED = 3;

type
  FARAPIEDITOR = function (
    FileName: PChar;
    Title: PChar;
    X1: IntPtr;
    Y1: IntPtr;
    X2: IntPtr;
    Y2: IntPtr;
    Flags: EDITOR_FLAGS;
    StartLine: IntPtr;
    StartChar: IntPtr;
    CodePage: UIntPtr
  ): IntPtr; stdcall;

type
  FARAPIGETMSG = function (
    const PluginId: TGUID;
    MsgId: IntPtr
  ): PChar; stdcall;

type
  FARHELPFLAGS = UInt64;

const
  FHELP_NOSHOWERROR = $0000000080000000;
  FHELP_SELFHELP = $0000000000000000;
  FHELP_FARHELP = $0000000000000001;
  FHELP_CUSTOMFILE = $0000000000000002;
  FHELP_CUSTOMPATH = $0000000000000004;
  FHELP_GUID = $0000000000000008;
  FHELP_USECONTENTS = $0000000040000000;
  FHELP_NONE = 0;

type
  FARAPISHOWHELP = function (
    ModuleName: PChar;
    Topic: PChar;
    Flags: FARHELPFLAGS
  ): BOOL; stdcall;

type
  ADVANCED_CONTROL_COMMANDS = Integer;

const
  ACTL_GETFARMANAGERVERSION = 0;
  ACTL_WAITKEY = 2;
  ACTL_GETCOLOR = 3;
  ACTL_GETARRAYCOLOR = 4;

  ACTL_GETWINDOWINFO = 6;
  ACTL_GETWINDOWCOUNT = 7;
  ACTL_SETCURRENTWINDOW = 8;
  ACTL_COMMIT = 9;
  ACTL_GETFARHWND = 10;
  ACTL_SETARRAYCOLOR = 16;
  ACTL_REDRAWALL = 19;
  ACTL_SYNCHRO = 20;
  ACTL_SETPROGRESSSTATE = 21;
  ACTL_SETPROGRESSVALUE = 22;
  ACTL_QUIT = 23;
  ACTL_GETFARRECT = 24;
  ACTL_GETCURSORPOS = 25;
  ACTL_SETCURSORPOS = 26;
  ACTL_PROGRESSNOTIFY = 27;
  ACTL_GETWINDOWTYPE = 28;

type
  FAR_MACRO_CONTROL_COMMANDS = Integer;

const
  MCTL_LOADALL = 0;
  MCTL_SAVEALL = 1;
  MCTL_SENDSTRING = 2;
  MCTL_GETSTATE = 5;
  MCTL_GETAREA = 6;
  MCTL_ADDMACRO = 7;
  MCTL_DELMACRO = 8;
  MCTL_GETLASTERROR = 9;
  MCTL_EXECSTRING = 10;

type
  FARKEYMACROFLAGS = UInt64;

const
  KMFLAGS_SILENTCHECK = $0000000000000001;
  KMFLAGS_NOSENDKEYSTOPLUGINS = $0000000000000002;
  KMFLAGS_ENABLEOUTPUT = $0000000000000004;
  KMFLAGS_LANGMASK = $0000000000000070;
  KMFLAGS_LUA = $0000000000000000;
  KMFLAGS_MOONSCRIPT = $0000000000000010;
  KMFLAGS_NONE = 0;

type
  FARMACROSENDSTRINGCOMMAND = Integer;

const
  MSSC_POST = 0;
  MSSC_CHECK = 2;

type
  FARMACROAREA = Integer;

const
  MACROAREA_OTHER = 0;

  MACROAREA_SHELL = 1;

  MACROAREA_VIEWER = 2;

  MACROAREA_EDITOR = 3;

  MACROAREA_DIALOG = 4;

  MACROAREA_SEARCH = 5;

  MACROAREA_DISKS = 6;

  MACROAREA_MAINMENU = 7;

  MACROAREA_MENU = 8;

  MACROAREA_HELP = 9;

  MACROAREA_INFOPANEL = 10;

  MACROAREA_QVIEWPANEL = 11;

  MACROAREA_TREEPANEL = 12;

  MACROAREA_FINDFOLDER = 13;

  MACROAREA_USERMENU = 14;

  MACROAREA_SHELLAUTOCOMPLETION = 15;

  MACROAREA_DIALOGAUTOCOMPLETION = 16;

  MACROAREA_GRABBER = 17;

  MACROAREA_DESKTOP = 18;


  MACROAREA_COMMON = 255;

type
  FARMACROSTATE = Integer;

const
  MACROSTATE_NOMACRO = 0;
  MACROSTATE_EXECUTING = 1;
  MACROSTATE_EXECUTING_COMMON = 2;
  MACROSTATE_RECORDING = 3;
  MACROSTATE_RECORDING_COMMON = 4;

type
  FARMACROPARSEERRORCODE = Integer;

const
  MPEC_SUCCESS = 0;
  MPEC_ERROR = 1;

type
  PMacroParseResult = ^MacroParseResult;
  MacroParseResult = record
    StructSize: UIntPtr;
    ErrCode: DWORD;
    ErrPos: COORD;
    ErrSrc: PChar;
  end;

type
  PMacroSendMacroText = ^MacroSendMacroText;
  MacroSendMacroText = record
    StructSize: UIntPtr;
    Flags: FARKEYMACROFLAGS;
    AKey: INPUT_RECORD;
    SequenceText: PChar;
  end;

type
  FARADDKEYMACROFLAGS = UInt64;

const
  AKMFLAGS_NONE = 0;

type
  FARMACROCALLBACK = function (
    Id: Pointer;
    Flags: FARADDKEYMACROFLAGS
  ): IntPtr; stdcall;

type
  PMacroAddMacro = ^MacroAddMacro;
  MacroAddMacro = record
    StructSize: UIntPtr;
    Id: Pointer;
    SequenceText: PChar;
    Description: PChar;
    Flags: FARKEYMACROFLAGS;
    AKey: INPUT_RECORD;
    Area: FARMACROAREA;
    Callback: FARMACROCALLBACK;
    Priority: IntPtr;
  end;

type
  FARMACROVARTYPE = Integer;

const
  FMVT_UNKNOWN = 0;
  FMVT_INTEGER = 1;
  FMVT_STRING = 2;
  FMVT_DOUBLE = 3;
  FMVT_BOOLEAN = 4;
  FMVT_BINARY = 5;
  FMVT_POINTER = 6;
  FMVT_NIL = 7;
  FMVT_ARRAY = 8;
  FMVT_PANEL = 9;
  FMVT_ERROR = 10;

type
  PFarMacroValue = ^FarMacroValue;

{$INCLUDE Far.Plugin.FarMacroValue.pas}

type
  PFarMacroCall = ^FarMacroCall;

{$INCLUDE Far.Plugin.FarMacroCall.pas}

{procedure (* Callback)(
  CallbackData: Pointer;
  var Values: FarMacroValue;
  Count: UIntPtr
  ); stdcall;}

type
  PFarGetValue = ^FarGetValue;
  FarGetValue = record
    StructSize: UIntPtr;
    &Type: IntPtr;
    Value: FarMacroValue;
  end;

type
  PMacroExecuteString = ^MacroExecuteString;
  MacroExecuteString = record
    StructSize: UIntPtr;
    Flags: FARKEYMACROFLAGS;
    SequenceText: PChar;
    InCount: UIntPtr;
    InValues: PFarMacroValue;
    OutCount: UIntPtr;
    OutValues: PFarMacroValue;
  end;

type
  PFarMacroLoad = ^FarMacroLoad;
  FarMacroLoad = record
    StructSize: UIntPtr;
    Path: PChar;
    Flags: UInt64;
  end;

type
  FARSETCOLORFLAGS = UInt64;

const
  FSETCLR_REDRAW = $0000000000000001;
  FSETCLR_NONE = 0;

type
  PFarSetColors = ^FarSetColors;
  FarSetColors = record
    StructSize: UIntPtr;
    Flags: FARSETCOLORFLAGS;
    StartIndex: UIntPtr;
    ColorsCount: UIntPtr;
    Colors: PFarColor;
  end;

type
  WINDOWINFO_TYPE = Integer;

const
  WTYPE_UNKNOWN = -1;
  WTYPE_DESKTOP = 0;
  WTYPE_PANELS = 1;
  WTYPE_VIEWER = 2;
  WTYPE_EDITOR = 3;
  WTYPE_DIALOG = 4;
  WTYPE_VMENU = 5;
  WTYPE_HELP = 6;
  WTYPE_COMBOBOX = 7;
  WTYPE_GRABBER = 8;
  WTYPE_HMENU = 9;

type
  WINDOWINFO_FLAGS = UInt64;

const
  WIF_MODIFIED = $0000000000000001;
  WIF_CURRENT = $0000000000000002;
  WIF_MODAL = $0000000000000004;
  WIF_NONE = 0;

type
  PWindowInfo = ^WindowInfo;
  WindowInfo = record
    StructSize: UIntPtr;
    Id: IntPtr;
    TypeName: PChar;
    Name: PChar;
    TypeNameSize: IntPtr;
    NameSize: IntPtr;
    Pos: IntPtr;
    &Type: WINDOWINFO_TYPE;
    Flags: WINDOWINFO_FLAGS;
  end;

type
  PWindowType = ^WindowType;
  WindowType = record
    StructSize: UIntPtr;
    &Type: WINDOWINFO_TYPE;
  end;

type
  TASKBARPROGRESSTATE = Integer;

const
  TBPS_NOPROGRESS = $0;
  TBPS_INDETERMINATE = $1;
  TBPS_NORMAL = $2;
  TBPS_ERROR = $4;
  TBPS_PAUSED = $8;

type
  PProgressValue = ^ProgressValue;
  ProgressValue = record
    StructSize: UIntPtr;
    Completed: UInt64;
    Total: UInt64;
  end;

type
  VIEWER_CONTROL_COMMANDS = Integer;

const
  VCTL_GETINFO = 0;
  VCTL_QUIT = 1;
  VCTL_REDRAW = 2;
  VCTL_SETKEYBAR = 3;
  VCTL_SETPOSITION = 4;
  VCTL_SELECT = 5;
  VCTL_SETMODE = 6;
  VCTL_GETFILENAME = 7;

type
  VIEWER_OPTIONS = UInt64;

const
  VOPT_SAVEFILEPOSITION = $0000000000000001;
  VOPT_AUTODETECTCODEPAGE = $0000000000000002;
  VOPT_SHOWTITLEBAR = $0000000000000004;
  VOPT_SHOWKEYBAR = $0000000000000008;
  VOPT_SHOWSCROLLBAR = $0000000000000010;
  VOPT_QUICKVIEW = $0000000000000020;
  VOPT_NONE = 0;

type
  VIEWER_SETMODE_TYPES = Integer;

const
  VSMT_VIEWMODE = 0;
  VSMT_WRAP = 1;
  VSMT_WORDWRAP = 2;

type
  VIEWER_SETMODEFLAGS_TYPES = UInt64;

const
  VSMFL_REDRAW = $0000000000000001;
  VSMFL_NONE = 0;

type
  PViewerSetMode = ^ViewerSetMode;
  ViewerSetMode = record
    StructSize: UIntPtr;
    &Type: VIEWER_SETMODE_TYPES;
    Param: record case Integer of
      0: (iParam: IntPtr);
      1: (wszParam: PChar);
    end;
    Flags: VIEWER_SETMODEFLAGS_TYPES;
  end;

type
  PViewerSelect = ^ViewerSelect;
  ViewerSelect = record
    StructSize: UIntPtr;
    BlockStartPos: Int64;
    BlockLen: Int64;
  end;

type
  VIEWER_SETPOS_FLAGS = UInt64;

const
  VSP_NOREDRAW = $0000000000000001;
  VSP_PERCENT = $0000000000000002;
  VSP_RELATIVE = $0000000000000004;
  VSP_NORETNEWPOS = $0000000000000008;
  VSP_NONE = 0;

type
  PViewerSetPosition = ^ViewerSetPosition;
  ViewerSetPosition = record
    StructSize: UIntPtr;
    Flags: VIEWER_SETPOS_FLAGS;
    StartPos: Int64;
    LeftPos: Int64;
  end;

type
  VIEWER_MODE_FLAGS = UInt64;

const
  VMF_WRAP = $0000000000000001;
  VMF_WORDWRAP = $0000000000000002;
  VMF_NONE = 0;

type
  VIEWER_MODE_TYPE = Integer;

const
  VMT_TEXT = 0;
  VMT_HEX = 1;
  VMT_DUMP = 2;

type
  PViewerMode = ^ViewerMode;
  ViewerMode = record
    CodePage: UIntPtr;
    Flags: VIEWER_MODE_FLAGS;
    ViewMode: VIEWER_MODE_TYPE;
  end;

type
  PViewerInfo = ^ViewerInfo;
  ViewerInfo = record
    StructSize: UIntPtr;
    ViewerID: IntPtr;
    TabSize: IntPtr;
    CurMode: ViewerMode;
    FileSize: Int64;
    FilePos: Int64;
    LeftPos: Int64;
    Options: VIEWER_OPTIONS;
    WindowSizeX: IntPtr;
    WindowSizeY: IntPtr;
  end;

type
  VIEWER_EVENTS = Integer;

const
  VE_READ = 0;
  VE_CLOSE = 1;

  VE_GOTFOCUS = 6;
  VE_KILLFOCUS = 7;

type
  EDITOR_EVENTS = Integer;

const
  EE_READ = 0;
  EE_SAVE = 1;
  EE_REDRAW = 2;
  EE_CLOSE = 3;

  EE_GOTFOCUS = 6;
  EE_KILLFOCUS = 7;
  EE_CHANGE = 8;

type
  DIALOG_EVENTS = Integer;

const
  DE_DLGPROCINIT = 0;
  DE_DEFDLGPROCINIT = 1;
  DE_DLGPROCEND = 2;

type
  SYNCHRO_EVENTS = Integer;

const
  SE_COMMONSYNCHRO = 0;
  SE_FOLDERCHANGED = 1;
  EEREDRAW_ALL = Pointer(0);
  CURRENT_EDITOR = -1;

type
  EDITOR_CONTROL_COMMANDS = Integer;

const
  ECTL_GETSTRING = 0;
  ECTL_SETSTRING = 1;
  ECTL_INSERTSTRING = 2;
  ECTL_DELETESTRING = 3;
  ECTL_DELETECHAR = 4;
  ECTL_INSERTTEXT = 5;
  ECTL_GETINFO = 6;
  ECTL_SETPOSITION = 7;
  ECTL_SELECT = 8;
  ECTL_REDRAW = 9;
  ECTL_TABTOREAL = 10;
  ECTL_REALTOTAB = 11;
  ECTL_EXPANDTABS = 12;
  ECTL_SETTITLE = 13;
  ECTL_READINPUT = 14;
  ECTL_PROCESSINPUT = 15;
  ECTL_ADDCOLOR = 16;
  ECTL_GETCOLOR = 17;
  ECTL_SAVEFILE = 18;
  ECTL_QUIT = 19;
  ECTL_SETKEYBAR = 20;

  ECTL_SETPARAM = 22;
  ECTL_GETBOOKMARKS = 23;
  ECTL_DELETEBLOCK = 25;
  ECTL_ADDSESSIONBOOKMARK = 26;
  ECTL_PREVSESSIONBOOKMARK = 27;
  ECTL_NEXTSESSIONBOOKMARK = 28;
  ECTL_CLEARSESSIONBOOKMARKS = 29;
  ECTL_DELETESESSIONBOOKMARK = 30;
  ECTL_GETSESSIONBOOKMARKS = 31;
  ECTL_UNDOREDO = 32;
  ECTL_GETFILENAME = 33;
  ECTL_DELCOLOR = 34;
  ECTL_SUBSCRIBECHANGEEVENT = 36;
  ECTL_UNSUBSCRIBECHANGEEVENT = 37;
  ECTL_GETTITLE = 38;

type
  EDITOR_SETPARAMETER_TYPES = Integer;

const
  ESPT_TABSIZE = 0;
  ESPT_EXPANDTABS = 1;
  ESPT_AUTOINDENT = 2;
  ESPT_CURSORBEYONDEOL = 3;
  ESPT_CHARCODEBASE = 4;
  ESPT_CODEPAGE = 5;
  ESPT_SAVEFILEPOSITION = 6;
  ESPT_LOCKMODE = 7;
  ESPT_SETWORDDIV = 8;
  ESPT_GETWORDDIV = 9;
  ESPT_SHOWWHITESPACE = 10;
  ESPT_SETBOM = 11;

type
  PEditorSetParameter = ^EditorSetParameter;
  EditorSetParameter = record
    StructSize: UIntPtr;
    &Type: EDITOR_SETPARAMETER_TYPES;
    Param: record case Integer of
      0: (iParam: IntPtr);
      1: (wszParam: PChar);
      2: (Reserved: IntPtr);
    end;
    Flags: UInt64;
    Size: UIntPtr;
  end;

type
  EDITOR_UNDOREDO_COMMANDS = Integer;

const
  EUR_BEGIN = 0;
  EUR_END = 1;
  EUR_UNDO = 2;
  EUR_REDO = 3;

type
  PEditorUndoRedo = ^EditorUndoRedo;
  EditorUndoRedo = record
    StructSize: UIntPtr;
    Command: EDITOR_UNDOREDO_COMMANDS;
  end;

type
  PEditorGetString = ^EditorGetString;
  EditorGetString = record
    StructSize: UIntPtr;
    StringNumber: IntPtr;
    StringLength: IntPtr;
    StringText: PChar;
    StringEOL: PChar;
    SelStart: IntPtr;
    SelEnd: IntPtr;
  end;

type
  PEditorSetString = ^EditorSetString;
  EditorSetString = record
    StructSize: UIntPtr;
    StringNumber: IntPtr;
    StringLength: IntPtr;
    StringText: PChar;
    StringEOL: PChar;
  end;

type
  EXPAND_TABS = Integer;

const
  EXPAND_NOTABS = 0;
  EXPAND_ALLTABS = 1;
  EXPAND_NEWTABS = 2;

type
  EDITOR_OPTIONS = Integer;

const
  EOPT_EXPANDALLTABS = $00000001;
  EOPT_PERSISTENTBLOCKS = $00000002;
  EOPT_DELREMOVESBLOCKS = $00000004;
  EOPT_AUTOINDENT = $00000008;
  EOPT_SAVEFILEPOSITION = $00000010;
  EOPT_AUTODETECTCODEPAGE = $00000020;
  EOPT_CURSORBEYONDEOL = $00000040;
  EOPT_EXPANDONLYNEWTABS = $00000080;
  EOPT_SHOWWHITESPACE = $00000100;
  EOPT_BOM = $00000200;
  EOPT_SHOWLINEBREAK = $00000400;
  EOPT_SHOWTITLEBAR = $00000800;
  EOPT_SHOWKEYBAR = $00001000;
  EOPT_SHOWSCROLLBAR = $00002000;

type
  EDITOR_BLOCK_TYPES = Integer;

const
  BTYPE_NONE = 0;
  BTYPE_STREAM = 1;
  BTYPE_COLUMN = 2;

type
  EDITOR_CURRENTSTATE = Integer;

const
  ECSTATE_MODIFIED = $00000001;
  ECSTATE_SAVED = $00000002;
  ECSTATE_LOCKED = $00000004;

type
  PEditorInfo = ^EditorInfo;
  EditorInfo = record
    StructSize: UIntPtr;
    EditorID: IntPtr;
    WindowSizeX: IntPtr;
    WindowSizeY: IntPtr;
    TotalLines: IntPtr;
    CurLine: IntPtr;
    CurPos: IntPtr;
    CurTabPos: IntPtr;
    TopScreenLine: IntPtr;
    LeftPos: IntPtr;
    Overtype: IntPtr;
    BlockType: IntPtr;
    BlockStartLine: IntPtr;
    Options: UIntPtr;
    TabSize: IntPtr;
    BookmarkCount: UIntPtr;
    SessionBookmarkCount: UIntPtr;
    CurState: UIntPtr;
    CodePage: UIntPtr;
  end;

type
  PEditorBookmarks = ^EditorBookmarks;
  EditorBookmarks = record
    StructSize: UIntPtr;
    Size: UIntPtr;
    Count: UIntPtr;
    Line: PIntPtr;
    Cursor: PIntPtr;
    ScreenLine: PIntPtr;
    LeftPos: PIntPtr;
  end;

type
  PEditorSetPosition = ^EditorSetPosition;
  EditorSetPosition = record
    StructSize: UIntPtr;
    CurLine: IntPtr;
    CurPos: IntPtr;
    CurTabPos: IntPtr;
    TopScreenLine: IntPtr;
    LeftPos: IntPtr;
    Overtype: IntPtr;
  end;

type
  PEditorSelect = ^EditorSelect;
  EditorSelect = record
    StructSize: UIntPtr;
    BlockType: IntPtr;
    BlockStartLine: IntPtr;
    BlockStartPos: IntPtr;
    BlockWidth: IntPtr;
    BlockHeight: IntPtr;
  end;

type
  PEditorConvertPos = ^EditorConvertPos;
  EditorConvertPos = record
    StructSize: UIntPtr;
    StringNumber: IntPtr;
    SrcPos: IntPtr;
    DestPos: IntPtr;
  end;

type
  EDITORCOLORFLAGS = UInt64;

const
  ECF_TABMARKFIRST = $0000000000000001;
  ECF_TABMARKCURRENT = $0000000000000002;
  ECF_AUTODELETE = $0000000000000004;
  ECF_NONE = 0;

type
  PEditorColor = ^EditorColor;
  EditorColor = record
    StructSize: UIntPtr;
    StringNumber: IntPtr;
    ColorItem: IntPtr;
    StartPos: IntPtr;
    EndPos: IntPtr;
    Priority: UIntPtr;
    Flags: EDITORCOLORFLAGS;
    Color: FarColor;
    Owner: TGUID;
  end;

type
  PEditorDeleteColor = ^EditorDeleteColor;
  EditorDeleteColor = record
    StructSize: UIntPtr;
    Owner: TGUID;
    StringNumber: IntPtr;
    StartPos: IntPtr;
  end;

const
  EDITOR_COLOR_NORMAL_PRIORITY = $80000000;

type
  PEditorSaveFile = ^EditorSaveFile;
  EditorSaveFile = record
    StructSize: UIntPtr;
    FileName: PChar;
    FileEOL: PChar;
    CodePage: UIntPtr;
  end;

type
  EDITOR_CHANGETYPE = Integer;

const
  ECTYPE_CHANGED = 0;
  ECTYPE_ADDED = 1;
  ECTYPE_DELETED = 2;

type
  PEditorChange = ^EditorChange;
  EditorChange = record
    StructSize: UIntPtr;
    &Type: EDITOR_CHANGETYPE;
    StringNumber: IntPtr;
  end;

type
  PEditorSubscribeChangeEvent = ^EditorSubscribeChangeEvent;
  EditorSubscribeChangeEvent = record
    StructSize: UIntPtr;
    PluginId: TGUID;
  end;

type
  INPUTBOXFLAGS = UInt64;

const
  FIB_ENABLEEMPTY = $0000000000000001;
  FIB_PASSWORD = $0000000000000002;
  FIB_EXPANDENV = $0000000000000004;
  FIB_NOUSELASTHISTORY = $0000000000000008;
  FIB_BUTTONS = $0000000000000010;
  FIB_NOAMPERSAND = $0000000000000020;
  FIB_EDITPATH = $0000000000000040;
  FIB_EDITPATHEXEC = $0000000000000080;
  FIB_NONE = 0;

type
  FARAPIINPUTBOX = function (
    const PluginId: TGUID;
    const Id: TGUID;
    Title: PChar;
    SubTitle: PChar;
    HistoryName: PChar;
    SrcText: PChar;
    DestText: PChar;
    DestSize: UIntPtr;
    HelpTopic: PChar;
    Flags: INPUTBOXFLAGS
  ): IntPtr; stdcall;

type
  FAR_PLUGINS_CONTROL_COMMANDS = Integer;

const
  PCTL_LOADPLUGIN = 0;
  PCTL_UNLOADPLUGIN = 1;
  PCTL_FORCEDLOADPLUGIN = 2;
  PCTL_FINDPLUGIN = 3;
  PCTL_GETPLUGININFORMATION = 4;
  PCTL_GETPLUGINS = 5;

type
  FAR_PLUGIN_LOAD_TYPE = Integer;

const
  PLT_PATH = 0;

type
  FAR_PLUGIN_FIND_TYPE = Integer;

const
  PFM_GUID = 0;
  PFM_MODULENAME = 1;

type
  FAR_PLUGIN_FLAGS = UInt64;

const
  FPF_LOADED = $0000000000000001;
  FPF_ANSI = $1000000000000000;
  FPF_NONE = 0;

type
  FAR_FILE_FILTER_CONTROL_COMMANDS = Integer;

const
  FFCTL_CREATEFILEFILTER = 0;
  FFCTL_FREEFILEFILTER = 1;
  FFCTL_OPENFILTERSMENU = 2;
  FFCTL_STARTINGTOFILTER = 3;
  FFCTL_ISFILEINFILTER = 4;

type
  FAR_FILE_FILTER_TYPE = Integer;

const
  FFT_PANEL = 0;
  FFT_FINDFILE = 1;
  FFT_COPY = 2;
  FFT_SELECT = 3;
  FFT_CUSTOM = 4;

type
  FAR_REGEXP_CONTROL_COMMANDS = Integer;

const
  RECTL_CREATE = 0;
  RECTL_FREE = 1;
  RECTL_COMPILE = 2;
  RECTL_OPTIMIZE = 3;
  RECTL_MATCHEX = 4;
  RECTL_SEARCHEX = 5;
  RECTL_BRACKETSCOUNT = 6;
  RECTL_NAMEDGROUPINDEX = 7;

type
  PRegExpMatch = ^RegExpMatch;
  RegExpMatch = record
    start: IntPtr;
    &end: IntPtr;
  end;

type
  PRegExpSearch = ^RegExpSearch;
  RegExpSearch = record
    Text: PChar;
    Position: IntPtr;
    Length: IntPtr;
    Match: PRegExpMatch;
    Count: IntPtr;
    Reserved: Pointer;
  end;

type
  FAR_SETTINGS_CONTROL_COMMANDS = Integer;

const
  SCTL_CREATE = 0;
  SCTL_FREE = 1;
  SCTL_SET = 2;
  SCTL_GET = 3;
  SCTL_ENUM = 4;
  SCTL_DELETE = 5;
  SCTL_CREATESUBKEY = 6;
  SCTL_OPENSUBKEY = 7;

type
  FARSETTINGSTYPES = Integer;

const
  FST_UNKNOWN = 0;
  FST_SUBKEY = 1;
  FST_QWORD = 2;
  FST_STRING = 3;
  FST_DATA = 4;

type
  FARSETTINGS_SUBFOLDERS = Integer;

const
  FSSF_ROOT = 0;
  FSSF_HISTORY_CMD = 1;
  FSSF_HISTORY_FOLDER = 2;
  FSSF_HISTORY_VIEW = 3;
  FSSF_HISTORY_EDIT = 4;
  FSSF_HISTORY_EXTERNAL = 5;
  FSSF_FOLDERSHORTCUT_0 = 6;
  FSSF_FOLDERSHORTCUT_1 = 7;
  FSSF_FOLDERSHORTCUT_2 = 8;
  FSSF_FOLDERSHORTCUT_3 = 9;
  FSSF_FOLDERSHORTCUT_4 = 10;
  FSSF_FOLDERSHORTCUT_5 = 11;
  FSSF_FOLDERSHORTCUT_6 = 12;
  FSSF_FOLDERSHORTCUT_7 = 13;
  FSSF_FOLDERSHORTCUT_8 = 14;
  FSSF_FOLDERSHORTCUT_9 = 15;
  FSSF_CONFIRMATIONS = 16;
  FSSF_SYSTEM = 17;
  FSSF_PANEL = 18;
  FSSF_EDITOR = 19;
  FSSF_SCREEN = 20;
  FSSF_DIALOG = 21;
  FSSF_INTERFACE = 22;
  FSSF_PANELLAYOUT = 23;

type
  FAR_PLUGIN_SETTINGS_LOCATION = Integer;

const
  PSL_ROAMING = 0;
  PSL_LOCAL = 1;

type
  PFarSettingsCreate = ^FarSettingsCreate;
  FarSettingsCreate = record
    StructSize: UIntPtr;
    Guid: TGUID;
    Handle: THandle;
  end;

type
  PFarSettingsItem = ^FarSettingsItem;

{$INCLUDE Far.Plugin.FarSettingsItem.pas}

type
  PFarSettingsName = ^FarSettingsName;
  FarSettingsName = record
    Name: PChar;
    &Type: FARSETTINGSTYPES;
  end;

type
  PFarSettingsHistory = ^FarSettingsHistory;
  FarSettingsHistory = record
    Name: PChar;
    Param: PChar;
    PluginId: TGUID;
    &File: PChar;
    Time: FILETIME;
    Lock: BOOL;
  end;

type
  PFarSettingsEnum = ^FarSettingsEnum;
  FarSettingsEnum = record
    StructSize: UIntPtr;
    Root: UIntPtr;
    Count: UIntPtr;
    Value: record case Integer of
      0: (Items: PFarSettingsName);
      1: (Histories: PFarSettingsHistory);
    end;
  end;

type
  PFarSettingsValue = ^FarSettingsValue;
  FarSettingsValue = record
    StructSize: UIntPtr;
    Root: UIntPtr;
    Value: PChar;
  end;

type
  FARAPIPANELCONTROL = function (
    hPanel: THandle;
    Command: FILE_CONTROL_COMMANDS;
    Param1: IntPtr;
    Param2: Pointer
  ): IntPtr; stdcall;

type
  FARAPIADVCONTROL = function (
    const PluginId: TGUID;
    Command: ADVANCED_CONTROL_COMMANDS;
    Param1: IntPtr;
    Param2: Pointer
  ): IntPtr; stdcall;

type
  FARAPIVIEWERCONTROL = function (
    ViewerID: IntPtr;
    Command: VIEWER_CONTROL_COMMANDS;
    Param1: IntPtr;
    Param2: Pointer
  ): IntPtr; stdcall;

type
  FARAPIEDITORCONTROL = function (
    EditorID: IntPtr;
    Command: EDITOR_CONTROL_COMMANDS;
    Param1: IntPtr;
    Param2: Pointer
  ): IntPtr; stdcall;

type
  FARAPIMACROCONTROL = function (
    const PluginId: TGUID;
    Command: FAR_MACRO_CONTROL_COMMANDS;
    Param1: IntPtr;
    Param2: Pointer
  ): IntPtr; stdcall;

type
  FARAPIPLUGINSCONTROL = function (
    hHandle: THandle;
    Command: FAR_PLUGINS_CONTROL_COMMANDS;
    Param1: IntPtr;
    Param2: Pointer
  ): IntPtr; stdcall;

type
  FARAPIFILEFILTERCONTROL = function (
    hHandle: THandle;
    Command: FAR_FILE_FILTER_CONTROL_COMMANDS;
    Param1: IntPtr;
    Param2: Pointer
  ): IntPtr; stdcall;

type
  FARAPIREGEXPCONTROL = function (
    hHandle: THandle;
    Command: FAR_REGEXP_CONTROL_COMMANDS;
    Param1: IntPtr;
    Param2: Pointer
  ): IntPtr; stdcall;

type
  FARAPISETTINGSCONTROL = function (
    hHandle: THandle;
    Command: FAR_SETTINGS_CONTROL_COMMANDS;
    Param1: IntPtr;
    Param2: Pointer
  ): IntPtr; stdcall;

type
  FARCLIPBOARD_TYPE = Integer;

const
  FCT_ANY = 0;
  FCT_STREAM = 1;
  FCT_COLUMN = 2;

type
  FARSTDSPRINTF = function (
    Buffer: PChar;
    Format: PChar
  ): Integer; cdecl varargs;

type
  FARSTDSNPRINTF = function (
    Buffer: PChar;
    Sizebuf: UIntPtr;
    Format: PChar
  ): Integer; cdecl varargs;

type
  FARSTDSSCANF = function (
    Buffer: PChar;
    Format: PChar
  ): Integer; cdecl varargs;

type
  FARSTDGETFILEOWNER = function (
    Computer: PChar;
    Name: PChar;
    Owner: PChar;
    Size: UIntPtr
  ): UIntPtr; stdcall;

type
  FARSTDGETNUMBEROFLINKS = function (
    Name: PChar
  ): UIntPtr; stdcall;

type
  FARSTDATOI = function (
    s: PChar
  ): Integer; stdcall;

type
  FARSTDATOI64 = function (
    s: PChar
  ): Int64; stdcall;

type
  FARSTDITOA64 = function (
    value: Int64;
    Str: PChar;
    radix: Integer
  ): PChar; stdcall;

type
  FARSTDITOA = function (
    value: Integer;
    Str: PChar;
    radix: Integer
  ): PChar; stdcall;

type
  FARSTDLTRIM = function (
    Str: PChar
  ): PChar; stdcall;

type
  FARSTDRTRIM = function (
    Str: PChar
  ): PChar; stdcall;

type
  FARSTDTRIM = function (
    Str: PChar
  ): PChar; stdcall;

type
  FARSTDTRUNCSTR = function (
    Str: PChar;
    MaxLength: IntPtr
  ): PChar; stdcall;

type
  FARSTDTRUNCPATHSTR = function (
    Str: PChar;
    MaxLength: IntPtr
  ): PChar; stdcall;

type
  FARSTDQUOTESPACEONLY = function (
    Str: PChar
  ): PChar; stdcall;

type
  FARSTDPOINTTONAME = function (
    Path: PChar
  ): PChar; stdcall;

type
  FARSTDADDENDSLASH = function (
    Path: PChar
  ): BOOL; stdcall;

type
  FARSTDCOPYTOCLIPBOARD = function (
    &Type: FARCLIPBOARD_TYPE;
    Data: PChar
  ): BOOL; stdcall;

type
  FARSTDPASTEFROMCLIPBOARD = function (
    &Type: FARCLIPBOARD_TYPE;
    Data: PChar;
    Size: UIntPtr
  ): UIntPtr; stdcall;

type
  FARSTDLOCALISLOWER = function (
    Ch: Char
  ): Integer; stdcall;

type
  FARSTDLOCALISUPPER = function (
    Ch: Char
  ): Integer; stdcall;

type
  FARSTDLOCALISALPHA = function (
    Ch: Char
  ): Integer; stdcall;

type
  FARSTDLOCALISALPHANUM = function (
    Ch: Char
  ): Integer; stdcall;

type
  FARSTDLOCALUPPER = function (
    LowerChar: Char
  ): Char; stdcall;

type
  FARSTDLOCALLOWER = function (
    UpperChar: Char
  ): Char; stdcall;

type
  FARSTDLOCALUPPERBUF = procedure (
    Buf: PChar;
    Length: IntPtr
  ); stdcall;

type
  FARSTDLOCALLOWERBUF = procedure (
    Buf: PChar;
    Length: IntPtr
  ); stdcall;

type
  FARSTDLOCALSTRUPR = procedure (
    s1: PChar
  ); stdcall;

type
  FARSTDLOCALSTRLWR = procedure (
    s1: PChar
  ); stdcall;

type
  FARSTDLOCALSTRICMP = function (
    s1: PChar;
    s2: PChar
  ): Integer; stdcall;

type
  FARSTDLOCALSTRNICMP = function (
    s1: PChar;
    s2: PChar;
    n: IntPtr
  ): Integer; stdcall;

type
  FARSTDFARCLOCK = function (
  ): UInt64; stdcall;

type
  FARSTDCOMPARESTRINGS = function (
    Str1: PChar;
    Size1: UIntPtr;
    Str2: PChar;
    Size2: UIntPtr
  ): Integer; stdcall;

type
  PROCESSNAME_FLAGS = UInt64;

const
  PN_CMPNAME = $0000000000000000;
  PN_CMPNAMELIST = $0000000000010000;
  PN_GENERATENAME = $0000000000020000;
  PN_CHECKMASK = $0000000000030000;
  PN_SKIPPATH = $0000000001000000;
  PN_SHOWERRORMESSAGE = $0000000002000000;
  PN_NONE = 0;

type
  FARSTDPROCESSNAME = function (
    param1: PChar;
    param2: PChar;
    size: UIntPtr;
    flags: PROCESSNAME_FLAGS
  ): UIntPtr; stdcall;

type
  FARSTDUNQUOTE = procedure (
    Str: PChar
  ); stdcall;

type
  XLAT_FLAGS = UInt64;

const
  XLAT_SWITCHKEYBLAYOUT = $0000000000000001;
  XLAT_SWITCHKEYBBEEP = $0000000000000002;
  XLAT_USEKEYBLAYOUTNAME = $0000000000000004;
  XLAT_CONVERTALLCMDLINE = $0000000000010000;
  XLAT_NONE = 0;

type
  FARSTDINPUTRECORDTOKEYNAME = function (
    Key: PInputRecord;
    KeyText: PChar;
    Size: UIntPtr
  ): UIntPtr; stdcall;

type
  FARSTDXLAT = function (
    Line: PChar;
    StartPos: IntPtr;
    EndPos: IntPtr;
    Flags: XLAT_FLAGS
  ): PChar; stdcall;

type
  FARSTDKEYNAMETOINPUTRECORD = function (
    Name: PChar;
    Key: PInputRecord
  ): BOOL; stdcall;

type
  FRSUSERFUNC = function (
    FData: PPluginPanelItem;
    FullName: PChar;
    Param: Pointer
  ): Integer; stdcall;

type
  FRSMODE = UInt64;

const
  FRS_RETUPDIR = $0000000000000001;
  FRS_RECUR = $0000000000000002;
  FRS_SCANSYMLINK = $0000000000000004;
  FRS_NONE = 0;

type
  FARSTDRECURSIVESEARCH = procedure (
    InitDir: PChar;
    Mask: PChar;
    Func: FRSUSERFUNC;
    Flags: FRSMODE;
    Param: Pointer
  ); stdcall;

type
  FARSTDMKTEMP = function (
    Dest: PChar;
    DestSize: UIntPtr;
    Prefix: PChar
  ): UIntPtr; stdcall;

type
  FARSTDGETPATHROOT = function (
    Path: PChar;
    Root: PChar;
    DestSize: UIntPtr
  ): UIntPtr; stdcall;

type
  LINK_TYPE = Integer;

const
  LINK_HARDLINK = 1;
  LINK_JUNCTION = 2;
  LINK_VOLMOUNT = 3;
  LINK_SYMLINKFILE = 4;
  LINK_SYMLINKDIR = 5;
  LINK_SYMLINK = 6;

type
  MKLINK_FLAGS = UInt64;

const
  MLF_SHOWERRMSG = $0000000000010000;
  MLF_DONOTUPDATEPANEL = $0000000000020000;
  MLF_HOLDTARGET = $0000000000040000;
  MLF_NONE = 0;

type
  FARSTDMKLINK = function (
    Src: PChar;
    Dest: PChar;
    &Type: LINK_TYPE;
    Flags: MKLINK_FLAGS
  ): BOOL; stdcall;

type
  FARGETREPARSEPOINTINFO = function (
    Src: PChar;
    Dest: PChar;
    DestSize: UIntPtr
  ): UIntPtr; stdcall;

type
  CONVERTPATHMODES = Integer;

const
  CPM_FULL = 0;
  CPM_REAL = 1;
  CPM_NATIVE = 2;

type
  FARCONVERTPATH = function (
    Mode: CONVERTPATHMODES;
    Src: PChar;
    Dest: PChar;
    DestSize: UIntPtr
  ): UIntPtr; stdcall;

type
  FARGETCURRENTDIRECTORY = function (
    Size: UIntPtr;
    Buffer: PChar
  ): UIntPtr; stdcall;

type
  FARFORMATFILESIZEFLAGS = UInt64;

const
  FFFS_COMMAS = $0100000000000000;
  FFFS_FLOATSIZE = $0200000000000000;
  FFFS_SHOWBYTESINDEX = $0400000000000000;
  FFFS_ECONOMIC = $0800000000000000;
  FFFS_THOUSAND = $1000000000000000;
  FFFS_MINSIZEINDEX = $2000000000000000;
  FFFS_MINSIZEINDEX_MASK = $0000000000000003;
  FFFS_NONE = 0;

type
  FARFORMATFILESIZE = function (
    Size: UInt64;
    Width: IntPtr;
    Flags: FARFORMATFILESIZEFLAGS;
    Dest: PChar;
    DestSize: UIntPtr
  ): UIntPtr; stdcall;

type
  PFarStandardFunctions = ^FarStandardFunctions;
  FarStandardFunctions = record
    StructSize: UIntPtr;
    atoi: FARSTDATOI;
    atoi64: FARSTDATOI64;
    itoa: FARSTDITOA;
    itoa64: FARSTDITOA64;
    sprintf: FARSTDSPRINTF;
    sscanf: FARSTDSSCANF;
    qsort: FARSTDQSORT;
    bsearch: FARSTDBSEARCH;
    snprintf: FARSTDSNPRINTF;
    LIsLower: FARSTDLOCALISLOWER;
    LIsUpper: FARSTDLOCALISUPPER;
    LIsAlpha: FARSTDLOCALISALPHA;
    LIsAlphanum: FARSTDLOCALISALPHANUM;
    LUpper: FARSTDLOCALUPPER;
    LLower: FARSTDLOCALLOWER;
    LUpperBuf: FARSTDLOCALUPPERBUF;
    LLowerBuf: FARSTDLOCALLOWERBUF;
    LStrupr: FARSTDLOCALSTRUPR;
    LStrlwr: FARSTDLOCALSTRLWR;
    LStricmp: FARSTDLOCALSTRICMP;
    LStrnicmp: FARSTDLOCALSTRNICMP;
    Unquote: FARSTDUNQUOTE;
    LTrim: FARSTDLTRIM;
    RTrim: FARSTDRTRIM;
    Trim: FARSTDTRIM;
    TruncStr: FARSTDTRUNCSTR;
    TruncPathStr: FARSTDTRUNCPATHSTR;
    QuoteSpaceOnly: FARSTDQUOTESPACEONLY;
    PointToName: FARSTDPOINTTONAME;
    GetPathRoot: FARSTDGETPATHROOT;
    AddEndSlash: FARSTDADDENDSLASH;
    CopyToClipboard: FARSTDCOPYTOCLIPBOARD;
    PasteFromClipboard: FARSTDPASTEFROMCLIPBOARD;
    FarInputRecordToName: FARSTDINPUTRECORDTOKEYNAME;
    FarNameToInputRecord: FARSTDKEYNAMETOINPUTRECORD;
    XLat: FARSTDXLAT;
    GetFileOwner: FARSTDGETFILEOWNER;
    GetNumberOfLinks: FARSTDGETNUMBEROFLINKS;
    FarRecursiveSearch: FARSTDRECURSIVESEARCH;
    MkTemp: FARSTDMKTEMP;
    ProcessName: FARSTDPROCESSNAME;
    MkLink: FARSTDMKLINK;
    ConvertPath: FARCONVERTPATH;
    GetReparsePointInfo: FARGETREPARSEPOINTINFO;
    GetCurrentDirectory: FARGETCURRENTDIRECTORY;
    FormatFileSize: FARFORMATFILESIZE;
    FarClock: FARSTDFARCLOCK;
    CompareStrings: FARSTDCOMPARESTRINGS;
  end;

type
  PPluginStartupInfo = ^PluginStartupInfo;
  PluginStartupInfo = record
    StructSize: UIntPtr;
    ModuleName: PChar;
    Menu: FARAPIMENU;
    Message: FARAPIMESSAGE;
    GetMsg: FARAPIGETMSG;
    PanelControl: FARAPIPANELCONTROL;
    SaveScreen: FARAPISAVESCREEN;
    RestoreScreen: FARAPIRESTORESCREEN;
    GetDirList: FARAPIGETDIRLIST;
    GetPluginDirList: FARAPIGETPLUGINDIRLIST;
    FreeDirList: FARAPIFREEDIRLIST;
    FreePluginDirList: FARAPIFREEPLUGINDIRLIST;
    Viewer: FARAPIVIEWER;
    Editor: FARAPIEDITOR;
    Text: FARAPITEXT;
    EditorControl: FARAPIEDITORCONTROL;
    FSF: PFARSTANDARDFUNCTIONS;
    ShowHelp: FARAPISHOWHELP;
    AdvControl: FARAPIADVCONTROL;
    InputBox: FARAPIINPUTBOX;
    ColorDialog: FARAPICOLORDIALOG;
    DialogInit: FARAPIDIALOGINIT;
    DialogRun: FARAPIDIALOGRUN;
    DialogFree: FARAPIDIALOGFREE;
    SendDlgMessage: FARAPISENDDLGMESSAGE;
    DefDlgProc: FARAPIDEFDLGPROC;
    ViewerControl: FARAPIVIEWERCONTROL;
    PluginsControl: FARAPIPLUGINSCONTROL;
    FileFilterControl: FARAPIFILEFILTERCONTROL;
    RegExpControl: FARAPIREGEXPCONTROL;
    MacroControl: FARAPIMACROCONTROL;
    SettingsControl: FARAPISETTINGSCONTROL;
    &Private: Pointer;
    Instance: Pointer;
    FreeScreen: FARAPIFREESCREEN;
  end;

type
  FARAPICREATEFILE = function (
    &Object: PChar;
    DesiredAccess: DWORD;
    ShareMode: DWORD;
    SecurityAttributes: PSecurityAttributes;
    CreationDistribution: DWORD;
    FlagsAndAttributes: DWORD;
    TemplateFile: THandle
  ): THandle; stdcall;

type
  FARAPIGETFILEATTRIBUTES = function (
    FileName: PChar
  ): DWORD; stdcall;

type
  FARAPISETFILEATTRIBUTES = function (
    FileName: PChar;
    dwFileAttributes: DWORD
  ): BOOL; stdcall;

type
  FARAPIMOVEFILEEX = function (
    ExistingFileName: PChar;
    NewFileName: PChar;
    dwFlags: DWORD
  ): BOOL; stdcall;

type
  FARAPIDELETEFILE = function (
    FileName: PChar
  ): BOOL; stdcall;

type
  FARAPIREMOVEDIRECTORY = function (
    DirName: PChar
  ): BOOL; stdcall;

type
  FARAPICREATEDIRECTORY = function (
    PathName: PChar;
    lpSecurityAttributes: PSecurityAttributes
  ): BOOL; stdcall;

type
  PArclitePrivateInfo = ^ArclitePrivateInfo;
  ArclitePrivateInfo = record
    StructSize: UIntPtr;
    CreateFile: FARAPICREATEFILE;
    GetFileAttributes: FARAPIGETFILEATTRIBUTES;
    SetFileAttributes: FARAPISETFILEATTRIBUTES;
    MoveFileEx: FARAPIMOVEFILEEX;
    DeleteFile: FARAPIDELETEFILE;
    RemoveDirectory: FARAPIREMOVEDIRECTORY;
    CreateDirectory: FARAPICREATEDIRECTORY;
  end;

type
  PNetBoxPrivateInfo = ^NetBoxPrivateInfo;
  NetBoxPrivateInfo = record
    StructSize: UIntPtr;
    CreateFile: FARAPICREATEFILE;
    GetFileAttributes: FARAPIGETFILEATTRIBUTES;
    SetFileAttributes: FARAPISETFILEATTRIBUTES;
    MoveFileEx: FARAPIMOVEFILEEX;
    DeleteFile: FARAPIDELETEFILE;
    RemoveDirectory: FARAPIREMOVEDIRECTORY;
    CreateDirectory: FARAPICREATEDIRECTORY;
  end;

type
  PMacroPluginReturn = ^MacroPluginReturn;
  MacroPluginReturn = record
    ReturnType: IntPtr;
    Count: UIntPtr;
    Values: PFarMacroValue;
  end;

type
  FARAPICALLFAR = function (
    CheckCode: IntPtr;
    Data: PFarMacroCall
  ): IntPtr; stdcall;

type
  PMacroPrivateInfo = ^MacroPrivateInfo;
  MacroPrivateInfo = record
    StructSize: UIntPtr;
    CallFar: FARAPICALLFAR;
  end;

type
  PLUGIN_FLAGS = UInt64;

const
  PF_PRELOAD = $0000000000000001;
  PF_DISABLEPANELS = $0000000000000002;
  PF_EDITOR = $0000000000000004;
  PF_VIEWER = $0000000000000008;
  PF_FULLCMDLINE = $0000000000000010;
  PF_DIALOG = $0000000000000020;
  PF_NONE = 0;

type
  PPluginMenuItem = ^PluginMenuItem;
  PluginMenuItem = record
    Guids: PGUID;
    Strings: PPChar;
    Count: UIntPtr;
  end;

type
  VERSION_STAGE = Integer;

const
  VS_RELEASE = 0;
  VS_ALPHA = 1;
  VS_BETA = 2;
  VS_RC = 3;
  VS_SPECIAL = 4;
  VS_PRIVATE = 5;

type
  PVersionInfo = ^VersionInfo;
  VersionInfo = record
    Major: DWORD;
    Minor: DWORD;
    Revision: DWORD;
    Build: DWORD;
    Stage: VERSION_STAGE;
  end;

type
  PGlobalInfo = ^GlobalInfo;
  GlobalInfo = record
    StructSize: UIntPtr;
    MinFarVersion: VersionInfo;
    Version: VersionInfo;
    Guid: TGUID;
    Title: PChar;
    Description: PChar;
    Author: PChar;
    Instance: Pointer;
  end;

type
  PPluginInfo = ^PluginInfo;
  PluginInfo = record
    StructSize: UIntPtr;
    Flags: PLUGIN_FLAGS;
    DiskMenu: PluginMenuItem;
    PluginMenu: PluginMenuItem;
    PluginConfig: PluginMenuItem;
    CommandPrefix: PChar;
    Instance: Pointer;
  end;

type
  PFarGetPluginInformation = ^FarGetPluginInformation;
  FarGetPluginInformation = record
    StructSize: UIntPtr;
    ModuleName: PChar;
    Flags: FAR_PLUGIN_FLAGS;
    PInfo: PPluginInfo;
    GInfo: PGlobalInfo;
  end;

type
  INFOPANELLINE_FLAGS = UInt64;

const
  IPLFLAGS_SEPARATOR = $0000000000000001;
  IPLFLAGS_NONE = 0;

type
  PInfoPanelLine = ^InfoPanelLine;
  InfoPanelLine = record
    Text: PChar;
    Data: PChar;
    Flags: INFOPANELLINE_FLAGS;
  end;

type
  PANELMODE_FLAGS = UInt64;

const
  PMFLAGS_FULLSCREEN = $0000000000000001;
  PMFLAGS_DETAILEDSTATUS = $0000000000000002;
  PMFLAGS_ALIGNEXTENSIONS = $0000000000000004;
  PMFLAGS_CASECONVERSION = $0000000000000008;
  PMFLAGS_NONE = 0;

type
  PPanelMode = ^PanelMode;
  PanelMode = record
    ColumnTypes: PChar;
    ColumnWidths: PChar;
    ColumnTitles: PPChar;
    StatusColumnTypes: PChar;
    StatusColumnWidths: PChar;
    Flags: PANELMODE_FLAGS;
  end;

type
  OPENPANELINFO_FLAGS = UInt64;

const
  OPIF_DISABLEFILTER = $0000000000000001;
  OPIF_DISABLESORTGROUPS = $0000000000000002;
  OPIF_DISABLEHIGHLIGHTING = $0000000000000004;
  OPIF_ADDDOTS = $0000000000000008;
  OPIF_RAWSELECTION = $0000000000000010;
  OPIF_REALNAMES = $0000000000000020;
  OPIF_SHOWNAMESONLY = $0000000000000040;
  OPIF_SHOWRIGHTALIGNNAMES = $0000000000000080;
  OPIF_SHOWPRESERVECASE = $0000000000000100;
  OPIF_COMPAREFATTIME = $0000000000000400;
  OPIF_EXTERNALGET = $0000000000000800;
  OPIF_EXTERNALPUT = $0000000000001000;
  OPIF_EXTERNALDELETE = $0000000000002000;
  OPIF_EXTERNALMKDIR = $0000000000004000;
  OPIF_USEATTRHIGHLIGHTING = $0000000000008000;
  OPIF_USECRC32 = $0000000000010000;
  OPIF_USEFREESIZE = $0000000000020000;
  OPIF_SHORTCUT = $0000000000040000;
  OPIF_RECURSIVEPANEL = $0000000000080000;
  OPIF_DELETEFILEONCLOSE = $0000000000100000;
  OPIF_DELETEDIRONCLOSE = $0000000000200000;
  OPIF_NONE = 0;

type
  PKeyBarLabel = ^KeyBarLabel;
  KeyBarLabel = record
    Key: FarKey;
    Text: PChar;
    LongText: PChar;
  end;

type
  PKeyBarTitles = ^KeyBarTitles;
  KeyBarTitles = record
    CountLabels: UIntPtr;
    Labels: PKeyBarLabel;
  end;

type
  PFarSetKeyBarTitles = ^FarSetKeyBarTitles;
  FarSetKeyBarTitles = record
    StructSize: UIntPtr;
    Titles: PKeyBarTitles;
  end;

type
  OPERATION_MODES = UInt64;

const
  OPM_SILENT = $0000000000000001;
  OPM_FIND = $0000000000000002;
  OPM_VIEW = $0000000000000004;
  OPM_EDIT = $0000000000000008;
  OPM_TOPLEVEL = $0000000000000010;
  OPM_DESCR = $0000000000000020;
  OPM_QUICKVIEW = $0000000000000040;
  OPM_PGDN = $0000000000000080;
  OPM_COMMANDS = $0000000000000100;
  OPM_NONE = 0;

type
  POpenPanelInfo = ^OpenPanelInfo;
  OpenPanelInfo = record
    StructSize: UIntPtr;
    hPanel: THandle;
    Flags: OPENPANELINFO_FLAGS;
    HostFile: PChar;
    CurDir: PChar;
    Format: PChar;
    PanelTitle: PChar;
    InfoLines: PInfoPanelLine;
    InfoLinesNumber: UIntPtr;
    DescrFiles: PPChar;
    DescrFilesNumber: UIntPtr;
    PanelModesArray: PPanelMode;
    PanelModesNumber: UIntPtr;
    StartPanelMode: IntPtr;
    StartSortMode: OPENPANELINFO_SORTMODES;
    StartSortOrder: IntPtr;
    KeyBar: PKeyBarTitles;
    ShortcutData: PChar;
    FreeSize: UInt64;
    UserData: UserDataItem;
    Instance: Pointer;
  end;

type
  PAnalyseInfo = ^AnalyseInfo;
  AnalyseInfo = record
    StructSize: UIntPtr;
    FileName: PChar;
    Buffer: Pointer;
    BufferSize: UIntPtr;
    OpMode: OPERATION_MODES;
    Instance: Pointer;
  end;

type
  POpenAnalyseInfo = ^OpenAnalyseInfo;
  OpenAnalyseInfo = record
    StructSize: UIntPtr;
    Info: PAnalyseInfo;
    Handle: THandle;
  end;

type
  POpenMacroInfo = ^OpenMacroInfo;
  OpenMacroInfo = record
    StructSize: UIntPtr;
    Count: UIntPtr;
    Values: PFarMacroValue;
  end;

type
  FAROPENSHORTCUTFLAGS = UInt64;

const
  FOSF_ACTIVE = $0000000000000001;
  FOSF_NONE = 0;

type
  POpenShortcutInfo = ^OpenShortcutInfo;
  OpenShortcutInfo = record
    StructSize: UIntPtr;
    HostFile: PChar;
    ShortcutData: PChar;
    Flags: FAROPENSHORTCUTFLAGS;
  end;

type
  POpenCommandLineInfo = ^OpenCommandLineInfo;
  OpenCommandLineInfo = record
    StructSize: UIntPtr;
    CommandLine: PChar;
  end;

type
  OPENFROM = Integer;

const
  OPEN_LEFTDISKMENU = 0;
  OPEN_PLUGINSMENU = 1;
  OPEN_FINDLIST = 2;
  OPEN_SHORTCUT = 3;
  OPEN_COMMANDLINE = 4;
  OPEN_EDITOR = 5;
  OPEN_VIEWER = 6;
  OPEN_FILEPANEL = 7;
  OPEN_DIALOG = 8;
  OPEN_ANALYSE = 9;
  OPEN_RIGHTDISKMENU = 10;
  OPEN_FROMMACRO = 11;
  OPEN_LUAMACRO = 100;

type
  MACROCALLTYPE = Integer;

const
  MCT_MACROPARSE = 0;
  MCT_LOADMACROS = 1;
  MCT_ENUMMACROS = 2;
  MCT_WRITEMACROS = 3;
  MCT_GETMACRO = 4;
  MCT_RECORDEDMACRO = 5;
  MCT_DELMACRO = 6;
  MCT_RUNSTARTMACRO = 7;
  MCT_EXECSTRING = 8;
  MCT_PANELSORT = 9;
  MCT_GETCUSTOMSORTMODES = 10;
  MCT_ADDMACRO = 11;
  MCT_KEYMACRO = 12;
  MCT_CANPANELSORT = 13;

type
  MACROPLUGINRETURNTYPE = Integer;

const
  MPRT_NORMALFINISH = 0;
  MPRT_ERRORFINISH = 1;
  MPRT_ERRORPARSE = 2;
  MPRT_KEYS = 3;
  MPRT_PRINT = 4;
  MPRT_PLUGINCALL = 5;
  MPRT_PLUGINMENU = 6;
  MPRT_PLUGINCONFIG = 7;
  MPRT_PLUGINCOMMAND = 8;
  MPRT_USERMENU = 9;
  MPRT_HASNOMACRO = 10;

type
  POpenMacroPluginInfo = ^OpenMacroPluginInfo;
  OpenMacroPluginInfo = record
    CallType: MACROCALLTYPE;
    Data: PFarMacroCall;
    Ret: MacroPluginReturn;
  end;

type
  FAR_EVENTS = Integer;

const
  FE_CHANGEVIEWMODE = 0;
  FE_REDRAW = 1;
  FE_IDLE = 2;
  FE_CLOSE = 3;
  FE_BREAK = 4;
  FE_COMMAND = 5;

  FE_GOTFOCUS = 6;
  FE_KILLFOCUS = 7;
  FE_CHANGESORTPARAMS = 8;

type
  POpenInfo = ^OpenInfo;
  OpenInfo = record
    StructSize: UIntPtr;
    OpenFrom: OPENFROM;
    Guid: PGUID;
    Data: IntPtr;
    Instance: Pointer;
  end;

type
  PSetDirectoryInfo = ^SetDirectoryInfo;
  SetDirectoryInfo = record
    StructSize: UIntPtr;
    hPanel: THandle;
    Dir: PChar;
    Reserved: IntPtr;
    OpMode: OPERATION_MODES;
    UserData: UserDataItem;
    Instance: Pointer;
  end;

type
  PSetFindListInfo = ^SetFindListInfo;
  SetFindListInfo = record
    StructSize: UIntPtr;
    hPanel: THandle;
    PanelItem: PPluginPanelItem;
    ItemsNumber: UIntPtr;
    Instance: Pointer;
  end;

type
  PPutFilesInfo = ^PutFilesInfo;
  PutFilesInfo = record
    StructSize: UIntPtr;
    hPanel: THandle;
    PanelItem: PPluginPanelItem;
    ItemsNumber: UIntPtr;
    Move: BOOL;
    SrcPath: PChar;
    OpMode: OPERATION_MODES;
    Instance: Pointer;
  end;

type
  PProcessHostFileInfo = ^ProcessHostFileInfo;
  ProcessHostFileInfo = record
    StructSize: UIntPtr;
    hPanel: THandle;
    PanelItem: PPluginPanelItem;
    ItemsNumber: UIntPtr;
    OpMode: OPERATION_MODES;
    Instance: Pointer;
  end;

type
  PMakeDirectoryInfo = ^MakeDirectoryInfo;
  MakeDirectoryInfo = record
    StructSize: UIntPtr;
    hPanel: THandle;
    Name: PChar;
    OpMode: OPERATION_MODES;
    Instance: Pointer;
  end;

type
  PCompareInfo = ^CompareInfo;
  CompareInfo = record
    StructSize: UIntPtr;
    hPanel: THandle;
    Item1: PPluginPanelItem;
    Item2: PPluginPanelItem;
    Mode: OPENPANELINFO_SORTMODES;
    Instance: Pointer;
  end;

type
  PGetFindDataInfo = ^GetFindDataInfo;
  GetFindDataInfo = record
    StructSize: UIntPtr;
    hPanel: THandle;
    PanelItem: PPluginPanelItem;
    ItemsNumber: UIntPtr;
    OpMode: OPERATION_MODES;
    Instance: Pointer;
  end;

type
  PFreeFindDataInfo = ^FreeFindDataInfo;
  FreeFindDataInfo = record
    StructSize: UIntPtr;
    hPanel: THandle;
    PanelItem: PPluginPanelItem;
    ItemsNumber: UIntPtr;
    Instance: Pointer;
  end;

type
  PGetFilesInfo = ^GetFilesInfo;
  GetFilesInfo = record
    StructSize: UIntPtr;
    hPanel: THandle;
    PanelItem: PPluginPanelItem;
    ItemsNumber: UIntPtr;
    Move: BOOL;
    DestPath: PChar;
    OpMode: OPERATION_MODES;
    Instance: Pointer;
  end;

type
  PDeleteFilesInfo = ^DeleteFilesInfo;
  DeleteFilesInfo = record
    StructSize: UIntPtr;
    hPanel: THandle;
    PanelItem: PPluginPanelItem;
    ItemsNumber: UIntPtr;
    OpMode: OPERATION_MODES;
    Instance: Pointer;
  end;

type
  PProcessPanelInputInfo = ^ProcessPanelInputInfo;
  ProcessPanelInputInfo = record
    StructSize: UIntPtr;
    hPanel: THandle;
    Rec: INPUT_RECORD;
    Instance: Pointer;
  end;

type
  PProcessEditorInputInfo = ^ProcessEditorInputInfo;
  ProcessEditorInputInfo = record
    StructSize: UIntPtr;
    Rec: INPUT_RECORD;
    Instance: Pointer;
  end;

type
  PROCESSCONSOLEINPUT_FLAGS = UInt64;

const
  PCIF_NONE = 0;

type
  PProcessConsoleInputInfo = ^ProcessConsoleInputInfo;
  ProcessConsoleInputInfo = record
    StructSize: UIntPtr;
    Flags: PROCESSCONSOLEINPUT_FLAGS;
    Rec: INPUT_RECORD;
    Instance: Pointer;
  end;

type
  PExitInfo = ^ExitInfo;
  ExitInfo = record
    StructSize: UIntPtr;
    Instance: Pointer;
  end;

type
  PProcessPanelEventInfo = ^ProcessPanelEventInfo;
  ProcessPanelEventInfo = record
    StructSize: UIntPtr;
    Event: IntPtr;
    Param: Pointer;
    hPanel: THandle;
    Instance: Pointer;
  end;

type
  PProcessEditorEventInfo = ^ProcessEditorEventInfo;
  ProcessEditorEventInfo = record
    StructSize: UIntPtr;
    Event: IntPtr;
    Param: Pointer;
    EditorID: IntPtr;
    Instance: Pointer;
  end;

type
  PProcessDialogEventInfo = ^ProcessDialogEventInfo;
  ProcessDialogEventInfo = record
    StructSize: UIntPtr;
    Event: IntPtr;
    Param: PFarDialogEvent;
    Instance: Pointer;
  end;

type
  PProcessSynchroEventInfo = ^ProcessSynchroEventInfo;
  ProcessSynchroEventInfo = record
    StructSize: UIntPtr;
    Event: IntPtr;
    Param: Pointer;
    Instance: Pointer;
  end;

type
  PProcessViewerEventInfo = ^ProcessViewerEventInfo;
  ProcessViewerEventInfo = record
    StructSize: UIntPtr;
    Event: IntPtr;
    Param: Pointer;
    ViewerID: IntPtr;
    Instance: Pointer;
  end;

type
  PClosePanelInfo = ^ClosePanelInfo;
  ClosePanelInfo = record
    StructSize: UIntPtr;
    hPanel: THandle;
    Instance: Pointer;
  end;

type
  PCloseAnalyseInfo = ^CloseAnalyseInfo;
  CloseAnalyseInfo = record
    StructSize: UIntPtr;
    Handle: THandle;
    Instance: Pointer;
  end;

type
  PConfigureInfo = ^ConfigureInfo;
  ConfigureInfo = record
    StructSize: UIntPtr;
    Guid: PGUID;
    Instance: Pointer;
  end;

type
  PGetContentFieldsInfo = ^GetContentFieldsInfo;
  GetContentFieldsInfo = record
    StructSize: UIntPtr;
    Count: UIntPtr;
    Names: PPChar;
    Instance: Pointer;
  end;

type
  PGetContentDataInfo = ^GetContentDataInfo;
  GetContentDataInfo = record
    StructSize: UIntPtr;
    FilePath: PChar;
    Count: UIntPtr;
    Names: PPChar;
    Values: PPChar;
    Instance: Pointer;
  end;

type
  PErrorInfo = ^ErrorInfo;
  ErrorInfo = record
    StructSize: UIntPtr;
    Summary: PChar;
    Description: PChar;
  end;

{function AnalyseW(
  var Info: AnalyseInfo
  ): THandle; stdcall;}

{procedure CloseAnalyseW(
  var Info: CloseAnalyseInfo
  ); stdcall;}

{procedure ClosePanelW(
  var Info: ClosePanelInfo
  ); stdcall;}

{function CompareW(
  var Info: CompareInfo
  ): IntPtr; stdcall;}

{function ConfigureW(
  var Info: ConfigureInfo
  ): IntPtr; stdcall;}

{function DeleteFilesW(
  var Info: DeleteFilesInfo
  ): IntPtr; stdcall;}

{procedure ExitFARW(
  var Info: ExitInfo
  ); stdcall;}

{procedure FreeFindDataW(
  var Info: FreeFindDataInfo
  ); stdcall;}

{function GetFilesW(
  var Info: GetFilesInfo
  ): IntPtr; stdcall;}

{function GetFindDataW(
  var Info: GetFindDataInfo
  ): IntPtr; stdcall;}

{procedure GetGlobalInfoW(
  var Info: GlobalInfo
  ); stdcall;}

{procedure GetOpenPanelInfoW(
  var Info: OpenPanelInfo
  ); stdcall;}

{procedure GetPluginInfoW(
  var Info: PluginInfo
  ); stdcall;}

{function MakeDirectoryW(
  var Info: MakeDirectoryInfo
  ): IntPtr; stdcall;}

{function OpenW(
  var Info: OpenInfo
  ): THandle; stdcall;}

{function ProcessDialogEventW(
  var Info: ProcessDialogEventInfo
  ): IntPtr; stdcall;}

{function ProcessEditorEventW(
  var Info: ProcessEditorEventInfo
  ): IntPtr; stdcall;}

{function ProcessEditorInputW(
  var Info: ProcessEditorInputInfo
  ): IntPtr; stdcall;}

{function ProcessPanelEventW(
  var Info: ProcessPanelEventInfo
  ): IntPtr; stdcall;}

{function ProcessHostFileW(
  var Info: ProcessHostFileInfo
  ): IntPtr; stdcall;}

{function ProcessPanelInputW(
  var Info: ProcessPanelInputInfo
  ): IntPtr; stdcall;}

{function ProcessConsoleInputW(
  var Info: ProcessConsoleInputInfo
  ): IntPtr; stdcall;}

{function ProcessSynchroEventW(
  var Info: ProcessSynchroEventInfo
  ): IntPtr; stdcall;}

{function ProcessViewerEventW(
  var Info: ProcessViewerEventInfo
  ): IntPtr; stdcall;}

{function PutFilesW(
  var Info: PutFilesInfo
  ): IntPtr; stdcall;}

{function SetDirectoryW(
  var Info: SetDirectoryInfo
  ): IntPtr; stdcall;}

{function SetFindListW(
  var Info: SetFindListInfo
  ): IntPtr; stdcall;}

{procedure SetStartupInfoW(
  var Info: PluginStartupInfo
  ); stdcall;}

{function GetContentFieldsW(
  var Info: GetContentFieldsInfo
  ): IntPtr; stdcall;}

{function GetContentDataW(
  var Info: GetContentDataInfo
  ): IntPtr; stdcall;}

{procedure FreeContentDataW(
  var Info: GetContentDataInfo
  ); stdcall;}
